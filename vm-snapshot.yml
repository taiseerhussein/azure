---
# playbook_azure_windows_snapshot.yml

- name: Create Snapshot of Azure Windows VM Disk
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    resource_group: "win-22-3rd_group"  # e.g., 'my-windows-rg'
    vm_name: "win-22-3rd"                 # e.g., 'MyWinServer01'
    disk_name_to_snapshot: "{{ vm_name }}_OsDisk" # Usually the OS disk, or specify a data disk name e.g., 'MyDataDisk1'
    snapshot_prefix: "win-snapshot"               # Prefix for your snapshot name
    snapshot_location: "eastus"                   # Azure region for the snapshot (e.g., 'westus2', 'westeurope')

  tasks:
    - name: Get VM facts to confirm disk details and status
      azure.azcollection.azure_rm_virtualmachine_info:
        resource_group: "{{ resource_group }}"
        name: "{{ vm_name }}"
      register: vm_facts

    - name: Fail if VM not found
      ansible.builtin.fail:
        msg: "VM '{{ vm_name }}' not found in resource group '{{ resource_group }}'."
      when: not vm_facts.virtualmachines | default([])

    - name: Get OS disk ID for snapshotting
      ansible.builtin.set_fact:
        target_disk_id: "{{ vm_facts.virtualmachines[0].os_disk.id }}"
      when: disk_name_to_snapshot == vm_facts.virtualmachines[0].os_disk.name

    - name: Get Data disk ID for snapshotting (if specified)
      ansible.builtin.set_fact:
        target_disk_id: "{{ item.id }}"
      loop: "{{ vm_facts.virtualmachines[0].data_disks | default([]) }}"
      when:
        - target_disk_id is not defined # Only set if OS disk not already matched
        - item.name == disk_name_to_snapshot

    - name: Fail if the specified disk for snapshotting is not found
      ansible.builtin.fail:
        msg: "Disk '{{ disk_name_to_snapshot }}' not found on VM '{{ vm_name }}'."
      when: target_disk_id is not defined

    - name: Stop/Deallocate the VM (Recommended for consistency)
      azure.azcollection.azure_rm_virtualmachine:
        resource_group: "{{ resource_group }}"
        name: "{{ vm_name }}"
        state: deallocated
      when: vm_facts.virtualmachines[0].power_state != "VM deallocated"
      register: vm_deallocate_result
      async: 300 # Run asynchronously for 300 seconds
      poll: 10   # Check status every 10 seconds

    - name: Wait for VM to deallocate (if deallocation started)
      ansible.builtin.wait_for:
        timeout: 300 # Max wait time in seconds
      when: vm_deallocate_result is defined and vm_deallocate_result.changed

    - name: Create the disk snapshot
      azure.azcollection.azure_rm_snapshot:
        resource_group: "{{ resource_group }}"
        name: "{{ snapshot_prefix }}-{{ vm_name }}-{{ ansible_date_time.strftime('%Y%m%d-%H%M%S') }}"
        source_uri: "{{ target_disk_id }}"
        location: "{{ snapshot_location }}"
        hyper_v_generation: "{{ vm_facts.virtualmachines[0].hyper_v_generation | default('V1') }}" # Automatically detect or default to V1
        create_option: Copy
      register: snapshot_creation_result

    - name: Display snapshot creation status
      ansible.builtin.debug:
        msg: "Snapshot '{{ snapshot_creation_result.name }}' created successfully!"
      when: snapshot_creation_result.changed

    - name: Start the VM after snapshot (if it was stopped by this playbook)
      azure.azcollection.azure_rm_virtualmachine:
        resource_group: "{{ resource_group }}"
        name: "{{ vm_name }}"
        state: started
      when: vm_deallocate_result is defined and vm_deallocate_result.changed # Only start if we deallocated it
      register: vm_start_result
      async: 300
      poll: 10

    - name: Display VM start status
      ansible.builtin.debug:
        msg: "VM '{{ vm_name }}' started successfully!"
      when: vm_start_result is defined and vm_start_result.changed
