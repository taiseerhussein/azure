---
- name: Create snapshots
  hosts: windows # <<< IMPORTANT: Replace 'your_windows_group' with your actual inventory group name (e.g., 'windows_servers')
 
  vars:
    snapshot_auth: &snapshot_auth
      subscription_id: "{{ lookup('env', 'AZURE_CLIENT_ID') }}"
      client_id: "{{ lookup('ansible.builtin.env', 'AZURE_CLIENT_ID') }}"
      secret: "{{ lookup('ansible.builtin.env', 'AZURE_SECRET') }}"
      tenant: "{{ lookup('ansible.builtin.env', 'AZURE_TENANT') }}"
      resource_group: "{{ hostvars[inventory_hostname].resource_group }}"
  tasks:

    - block:
        - name: Set snapshot_base_name
          ansible.builtin.set_fact:
            snapshot_base_name: "{{ ansible_facts.date_time.iso8601_basic_short }}\
                _Patching_{{ hostvars[inventory_hostname].name }}"

        - name: Create snapshot of OS disk
          azure.azcollection.azure_rm_snapshot:
            <<: *snapshot_auth
            name: "{{ snapshot_base_name }}_OS"
            location: "{{ hostvars[inventory_hostname].location }}"
            creation_data:
              create_option: Copy
              source_id: "{{ hostvars[inventory_hostname].os_disk.id }}"
            tags:
              SourceVM: "{{ hostvars[inventory_hostname].name }}"
              SourceDisk: "{{ hostvars[inventory_hostname].os_disk.id }}"
              CreationDate: "{{ ansible_facts.date_time.iso8601_basic_short }}"
          register: os_snapshot_result

        - name: Create snapshot of data disks
          azure.azcollection.azure_rm_snapshot:
            <<: *snapshot_auth
            name: "{{ snapshot_base_name }}_LUN{{ item.lun }}"
            location: "{{ hostvars[inventory_hostname].location }}"
            creation_data:
              create_option: Copy
              source_id: "{{ item.id }}"
            tags:
              SourceVM: "{{ hostvars[inventory_hostname].name }}"
              SourceDisk: "{{ item.id }}"
              CreationDate: "{{ ansible_facts.date_time.iso8601_basic_short }}"
          loop: "{{ hostvars[inventory_hostname].data_disks }}"
          register: data_snapshot_result
          when: hostvars[inventory_hostname].data_disks is defined

        - name: Set no_data_disks to true when data disk not present
          ansible.builtin.set_fact:
            no_data_disks: true

        - name: Display os snapshot result
          ansible.builtin.debug:
            var: os_snapshot_result
          when: debug_play

        - name: Display os snapshot result
          ansible.builtin.debug:
            var: data_snapshot_result
          when: debug_play
      delegate_to: localhost
